(in-package :aoc2016)

(defun supports-tls? (s)
  (labels ((abba-not-palindrome? (s)
             (loop for match in (cl-ppcre:all-matches-as-strings "(.)(.)\\2\\1" s)
                     thereis (not (apply #'char= (coerce match 'list)))))
           (abba-in-brackets? (s)
             (loop for match in (cl-ppcre:all-matches-as-strings "\\[(.+?)\\]" s)
                   thereis (abba-not-palindrome? match))))
    (and (not (abba-in-brackets? s))
         (abba-not-palindrome? s))))

(defun supports-ssl? (s)
  (labels ((aba-not-palindrome? (s)
             (loop for i from 0 below (length s)
                   for sub = (subseq s i)
                   append
                   (loop for match in (cl-ppcre:all-matches-as-strings "(.).\\1" sub)
                         unless (apply #'char= (coerce match 'list))
                           collect match)))
           (aba-in-brackets? (s)
             (loop for match in (cl-ppcre:all-matches-as-strings "\\[(.+?)\\]" s)
                   for ok? = (aba-not-palindrome? match)
                   when ok? append ok?))
           (swapped? (s1 s2)
             (and (char= (char s1 0) (char s1 2) (char s2 1))
                  (char= (char s2 0) (char s2 2) (char s1 1)))))
    (let ((out-matches (aba-not-palindrome? (str:replace-all "\\[.+?\\]" " " s :regex t)))
          (in-matches (aba-in-brackets? s)))
      (loop for m1 in out-matches
              thereis (loop for m2 in in-matches
                              thereis (swapped? m1 m2))))))

(defun day-07% (input-file support-func)
  (loop for s in (uiop:read-file-lines input-file)
        count (funcall support-func s)))

(defun day-07 ()
  (let ((f (fetch-day-input-file 2016 7)))
    (values (day-07% f #'supports-tls?)
            (day-07% f #'supports-ssl?))))
